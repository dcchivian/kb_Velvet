#
# define display information
#
name: Velvet short-read assembler, Version 1.2.10 
tooltip: |
      Velvet consists of two main parts - Velveth and Velvetg
screenshots: []

icon: null

#
# define a set of similar methods that might be useful to the user
#
suggestions:
    apps:
        related:
            []
        next:
            []
    methods:
        related:
            []
        next:
            [annotate_contigset]

#
# Configure the display and description of parameters
#
parameters :
    read_libraries :
        ui-name : Read Libraries
        short-hint : Read libraries (only KBase PairedEnd Libs are input through this parameter)
    hash_length :
        ui-name : hash_length 
        short-hint : |
            An integer for length of hash
    output_contigset_name :
        ui-name : |
            Output ContigSet
        short-hint : |
            The name for the resulting ContigSet will be saved in KBase
    min_contig_length :
        ui-name : |
            Minimal contig length
        short-hint : |
            The shortest contig to accept in the resulting assembly object
    extra_params:
        ui-name : Advanced assembly parameters
        short-hint : Enter extra assembly parameters as strings (hash_length=29 auto_insert=False)

description : |
    <p>This is a KBase wrapper for Velvet.</p>
    <p>Velvet is a classic de-bruijn graph based assembler. Velvet works by efficiently manipulating de Bruijn graphs through simplification and compression. It eliminates errors and resolves repeats by first using an error correction algorithm that merges sequences together. Repeats are then removed from the sequence via the repeat solver that separates paths which share local overlaps. Velvet is fast and robust, although it is no longer in active development.</p>
    <p><b>Known limitations</b>: Velvet assembly quality is known to be sensitive to the hash length.</p>

publications :
    -
        display-text : |
            Zerbino, D. R., Birney, E. (2008) Velvet: Algorithms for de novo short read assembly using de Bruijn graphs. Genome Research, 18(5), 821-829, doi: 10.1101/gr.074492.107
