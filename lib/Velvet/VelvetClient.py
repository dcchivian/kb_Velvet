# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class Velvet(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_velveth(self, params, context=None):
        """
        Definition of run_velveth
        :param params: instance of type "VelvethParams" (Arguments for
           velveth input string workspace_name - the name of the workspace
           for input/output string out_folder - the folder name for output
           files int hash_length - EITHER an odd integer (if even, it will be
           decremented) <= 31 (if above, will be reduced)L) -> structure:
           parameter "out_folder" of String, parameter "workspace_name" of
           String, parameter "hash_length" of Long, parameter
           "reads_channels" of list of type "ReadsChannel" (Define a
           structure that mimics the concept of "channel" used by the Velvet
           program. string read_type - the read type, e.g., -short,
           -shortPaired, short2, shortPaired2, -long, or -longPaired string
           file_format - the format of the input file, e.g., -fasta, -fastq,
           -raw,-fasta.gz, -fastq.gz, -raw.gz, -sam, -bam, -fmtAuto string
           read_file_info - the hash that holds the details about the read
           file string file_layout - the layout of the file, e.g.,
           -interleaved or -separate bool read_reference - indicating if a
           reference file is used) -> structure: parameter "read_type" of
           String, parameter "file_format" of String, parameter
           "read_file_info" of type "ReadFileInfo" (Define a structure that
           holds the read file name and its use. Note: only read_file_name is
           required, the rest are optional. e.g., {"reference_file" =>
           "test_reference.fa", "read_file_name" => "mySortedReads.sam",
           "left_file" => "left.fa", "right_file" => "right.fa"}) ->
           structure: parameter "read_file" of String, parameter
           "reference_file" of String, parameter "left_file" of String,
           parameter "right_file" of String, parameter "file_layout" of
           String, parameter "read_reference" of type "bool" (A boolean - 0
           for false, 1 for true. @range (0, 1))
        :returns: instance of Long
        """
        return self._client.call_method(
            'Velvet.run_velveth',
            [params], self._service_ver, context)

    def run_velvetg(self, params, context=None):
        """
        Definition of run_velvetg
        :param params: instance of type "VelvetgParams" (Arguments for
           run_velvetg string workspace_name - the name of the workspace from
           which to take input and store output. string wk_folder - the name
           of the folder where the velvet results are created and saved
           output_contigset_name - the name of the output contigset
           list<paired_end_lib> float cov_cutoff - the removal of low
           coverage nodes AFTER tour bus or allow the system to infer it
           (default: no removal) int ins_length - expected distance between
           two paired end reads (default: no read pairing) int read_trkg; - 
           (1=yes|0=no) tracking of short read positions in assembly
           (default:0) int min_contig_length - minimum contig length exported
           to contigs.fa file (default: hash length * 2) int amos_file -
           (1=yes|0=no) #export assembly to AMOS file (default: 0) float
           exp_cov - <floating point|auto>, expected coverage of unique
           regions or allow the system to infer it (default: no long or
           paired-end read resolution) float long_cov_cutoff - removal of
           nodes with low long-read coverage AFTER tour bus(default: no
           removal)) -> structure: parameter "workspace_name" of String,
           parameter "wk_folder" of String, parameter "output_contigset_name"
           of String, parameter "cov_cutoff" of Double, parameter
           "ins_length" of Long, parameter "read_trkg" of Long, parameter
           "min_contig_length" of Long, parameter "amos_file" of Long,
           parameter "exp_cov" of Double, parameter "long_cov_cutoff" of
           Double
        :returns: instance of Long
        """
        return self._client.call_method(
            'Velvet.run_velvetg',
            [params], self._service_ver, context)

    def run_velvet(self, params, context=None):
        """
        Definition of run_velvet
        :param params: instance of type "VelvetParams" (Arguments for
           run_velvet) -> structure: parameter "h_params" of type
           "VelvethParams" (Arguments for velveth input string workspace_name
           - the name of the workspace for input/output string out_folder -
           the folder name for output files int hash_length - EITHER an odd
           integer (if even, it will be decremented) <= 31 (if above, will be
           reduced)L) -> structure: parameter "out_folder" of String,
           parameter "workspace_name" of String, parameter "hash_length" of
           Long, parameter "reads_channels" of list of type "ReadsChannel"
           (Define a structure that mimics the concept of "channel" used by
           the Velvet program. string read_type - the read type, e.g.,
           -short, -shortPaired, short2, shortPaired2, -long, or -longPaired
           string file_format - the format of the input file, e.g., -fasta,
           -fastq, -raw,-fasta.gz, -fastq.gz, -raw.gz, -sam, -bam, -fmtAuto
           string read_file_info - the hash that holds the details about the
           read file string file_layout - the layout of the file, e.g.,
           -interleaved or -separate bool read_reference - indicating if a
           reference file is used) -> structure: parameter "read_type" of
           String, parameter "file_format" of String, parameter
           "read_file_info" of type "ReadFileInfo" (Define a structure that
           holds the read file name and its use. Note: only read_file_name is
           required, the rest are optional. e.g., {"reference_file" =>
           "test_reference.fa", "read_file_name" => "mySortedReads.sam",
           "left_file" => "left.fa", "right_file" => "right.fa"}) ->
           structure: parameter "read_file" of String, parameter
           "reference_file" of String, parameter "left_file" of String,
           parameter "right_file" of String, parameter "file_layout" of
           String, parameter "read_reference" of type "bool" (A boolean - 0
           for false, 1 for true. @range (0, 1)), parameter "g_params" of
           type "VelvetgParams" (Arguments for run_velvetg string
           workspace_name - the name of the workspace from which to take
           input and store output. string wk_folder - the name of the folder
           where the velvet results are created and saved
           output_contigset_name - the name of the output contigset
           list<paired_end_lib> float cov_cutoff - the removal of low
           coverage nodes AFTER tour bus or allow the system to infer it
           (default: no removal) int ins_length - expected distance between
           two paired end reads (default: no read pairing) int read_trkg; - 
           (1=yes|0=no) tracking of short read positions in assembly
           (default:0) int min_contig_length - minimum contig length exported
           to contigs.fa file (default: hash length * 2) int amos_file -
           (1=yes|0=no) #export assembly to AMOS file (default: 0) float
           exp_cov - <floating point|auto>, expected coverage of unique
           regions or allow the system to infer it (default: no long or
           paired-end read resolution) float long_cov_cutoff - removal of
           nodes with low long-read coverage AFTER tour bus(default: no
           removal)) -> structure: parameter "workspace_name" of String,
           parameter "wk_folder" of String, parameter "output_contigset_name"
           of String, parameter "cov_cutoff" of Double, parameter
           "ins_length" of Long, parameter "read_trkg" of Long, parameter
           "min_contig_length" of Long, parameter "amos_file" of Long,
           parameter "exp_cov" of Double, parameter "long_cov_cutoff" of
           Double
        :returns: instance of type "VelvetResults" (Output parameter items
           for run_velvet report_name - the name of the KBaseReport.Report
           workspace object. report_ref - the workspace reference of the
           report.) -> structure: parameter "report_name" of String,
           parameter "report_ref" of String
        """
        return self._client.call_method(
            'Velvet.run_velvet',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('Velvet.status',
                                        [], self._service_ver, context)
